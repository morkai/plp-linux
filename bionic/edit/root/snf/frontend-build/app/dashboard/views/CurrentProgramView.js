// Part of <https://miracle.systems/p/walkner-snf> licensed under <CC BY-NC-SA 4.0>

define(["underscore","jquery","app/i18n","app/user","app/time","app/viewport","app/controller","app/core/View","app/dashboard/views/OrderPickerDialogView","app/dashboard/templates/currentProgram"],function(e,t,r,s,a,i,o,n,u,g){"use strict";return n.extend({template:g,events:{"click #-orderNo":function(){var e=new u({model:this.model});this.listenTo(e,"picked",function(e){o.tags.setValue("currentOrder",e.orderNo),o.tags.setValue("currentQty",{qtyTodo:e.qtyTodo,qtyDone:0}),i.closeDialog()}),i.showDialog(e,this.t("orderPicker:title"))}},localTopics:{"controller.valuesChanged":function(t){e.forEach(t,this.updateState,this)}},initialize:function(){n.prototype.initialize.apply(this,arguments),this.listenTo(this.model,"change:status",this.updateStatus),this.listenTo(this.model,"change:currentTest",this.updateProgressBar),this.listenTo(this.model,"change:currentProgram",function(){this.updateProgramName(),this.updateProgressBar()})},afterRender:function(){this.updateCurrentOrder(),this.updateStatus(),this.updateProgramName(),this.updateProgressBar()},updateState:function(e,t){switch(t){case"test.elapsedTime":case"test.hrsIntervalTime":case"test.hrsElapsedTime":case"test.hrsIteration":this.updateProgressValue();break;case"currentOrder":case"currentQty":this.updateCurrentOrder()}},updateStatus:function(){this.$(".currentProgram-status").removeClass("is-offline is-online is-testing").addClass("is-"+this.model.get("status"))},updateProgramName:function(){var e=this.model.get("currentProgram");this.$id("name").text(e?e.get("name"):r("dashboard","currentProgram:noProgram"))},updateProgressBar:function(){var e=this.model.get("currentProgram"),r=e?e.get("hrsCount"):0,s=this.$(".currentProgram-progress");s.find(".currentProgram-progress-hrs").remove();for(var a=0;a<r;++a){var i=t('<div class="currentProgram-progress-hrs"></div>');i.text(e.get("hrsTime")+e.get("hrsInterval")),s.append(i)}this.updateProgressValue()},updateProgressValue:function(){var e=this.model.get("currentProgram");if(e)if(this.model.isTesting()){var t=o.tags.getValue("test.hrsIteration"),r=o.tags.getValue("test.hrsIntervalTime"),s=o.tags.getValue("test.hrsElapsedTime");t>0||r>0||s>0?(this.setProgressBarValue(100,null),this.updateHrsProgress()):(this.updateProgressBarValue(),this.updateHrsProgress())}else this.setProgressBarValue(0,e.get("illuminationTime"));else this.setProgressBarValue(0,null)},updateProgressBarValue:function(){var e=o.tags.getValue("test.elapsedTime"),t=this.model.get("currentProgram").get("illuminationTime");this.setProgressBarValue(Math.min(100*e/t,100),Math.max(t-e,0))},setProgressBarValue:function(e,t){this.$(".progress-bar").css("width",e+"%"),this.$(".currentProgram-progress-value").text(null===t?"":a.toString(t)).toggleClass("is-halfway",e>60)},updateHrsProgress:function(){var e=this.model.get("currentProgram"),t=e.get("hrsCount"),r=e.get("hrsTime"),s=e.get("hrsInterval"),a=o.tags.getValue("test.hrsIteration"),i=o.tags.getValue("test.hrsIntervalTime"),n=o.tags.getValue("test.hrsElapsedTime"),u=0===a&&0===i&&0===n,g=0===n&&i===s;(n>0||g)&&(a-=1);for(var l=this.$(".currentProgram-progress-hrs"),d=0;d<t;++d){var h=l.eq(d).removeClass("is-waiting is-on is-finished");u||d>a?h.text(s+r):d<a?h.addClass("is-finished").text(""):0!==n||g?h.addClass("is-on").text(Math.max(r-n,0)):h.addClass("is-waiting").text(Math.max(s-i,0))}},updateCurrentOrder:function(){var e=o.tags.getValue("currentOrder")||this.t("currentProgram:order:empty"),t=o.tags.getValue("currentQty")||{qtyDone:0,qtyTodo:0};this.$id("orderNo").text(e),this.$id("qtyDone").text(t.qtyDone||"0"),this.$id("qtyTodo").text(t.qtyTodo||"?")}})});