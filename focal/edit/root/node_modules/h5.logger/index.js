'use strict';

const {inspect} = require('util');
const log = require('h5.main/lib/utils/log');

module.exports = log.extend({}).logger;

log.write = (log) =>
{
  let line = `>>> ${log.severity.padEnd(5)} ${formatDateTime(log.time, true)}`;

  if (log.module)
  {
    line += ` [${log.module}]`;
  }

  if (log.submodule)
  {
    line += ` [${log.submodule}]`;
  }

  let errorStack = log.error ? log.error.stack : '';

  if (log.message)
  {
    line += ` ${String(log.message).toString().trim()}`;
  }
  else if (errorStack)
  {
    const matches = errorStack.match(/^(?:Error:\s*)?(.*?)(\s{2,}at .*?)?$/s);

    if (matches)
    {
      line += ` ${matches[1].trim()}`;
      errorStack = (matches[2] || '').trim();

      if (errorStack)
      {
        errorStack = `    ${errorStack}`;
      }
    }
    else
    {
      line += ` ${errorStack.trim()}`;
      errorStack = '';
    }
  }

  console.log(line);

  if (log.error)
  {
    delete log.error.message;
    delete log.error.stack;
    delete log.error.code;
    delete log.error.statusCode;

    if (!Object.keys(log.error).length)
    {
      delete log.error;
    }
  }

  if (errorStack)
  {
    console.log(errorStack);
  }

  delete log.severity;
  delete log.time;
  delete log.module;
  delete log.submodule;
  delete log.message;

  if (Object.keys(log).length)
  {
    console.log(inspect(log, {colors: false, depth: 5}));
  }
};

function formatDateTime(date, ms)
{
  if (!date)
  {
    return '';
  }

  if (!(date instanceof Date))
  {
    date = new Date(date);
  }

  const month = date.getMonth() + 1;
  const day = date.getDate();
  const hours = date.getHours();
  const minutes = date.getMinutes();
  const seconds = date.getSeconds();
  let result = date.getFullYear();

  if (month < 10)
  {
    result += '-0' + month;
  }
  else
  {
    result += '-' + month;
  }

  if (day < 10)
  {
    result += '-0' + day;
  }
  else
  {
    result += '-' + day;
  }

  if (hours < 10)
  {
    result += ' 0' + hours;
  }
  else
  {
    result += ' ' + hours;
  }

  if (minutes < 10)
  {
    result += ':0' + minutes;
  }
  else
  {
    result += ':' + minutes;
  }

  if (seconds < 10)
  {
    result += ':0' + seconds;
  }
  else
  {
    result += ':' + seconds;
  }

  if (ms)
  {
    result += '.' + date.getMilliseconds().toString().padStart(3, '0');
  }

  return result;
};
